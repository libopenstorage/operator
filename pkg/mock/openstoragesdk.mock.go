// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStorageRoleServer,OpenStorageNodeServer,OpenStorageClusterServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
	reflect "reflect"
)

// MockOpenStorageRoleServer is a mock of OpenStorageRoleServer interface.
type MockOpenStorageRoleServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageRoleServerMockRecorder
}

// MockOpenStorageRoleServerMockRecorder is the mock recorder for MockOpenStorageRoleServer.
type MockOpenStorageRoleServerMockRecorder struct {
	mock *MockOpenStorageRoleServer
}

// NewMockOpenStorageRoleServer creates a new mock instance.
func NewMockOpenStorageRoleServer(ctrl *gomock.Controller) *MockOpenStorageRoleServer {
	mock := &MockOpenStorageRoleServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageRoleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageRoleServer) EXPECT() *MockOpenStorageRoleServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenStorageRoleServer) Create(arg0 context.Context, arg1 *api.SdkRoleCreateRequest) (*api.SdkRoleCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageRoleServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenStorageRoleServer) Delete(arg0 context.Context, arg1 *api.SdkRoleDeleteRequest) (*api.SdkRoleDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageRoleServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Delete), arg0, arg1)
}

// Enumerate mocks base method.
func (m *MockOpenStorageRoleServer) Enumerate(arg0 context.Context, arg1 *api.SdkRoleEnumerateRequest) (*api.SdkRoleEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageRoleServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Enumerate), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageRoleServer) Inspect(arg0 context.Context, arg1 *api.SdkRoleInspectRequest) (*api.SdkRoleInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageRoleServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Inspect), arg0, arg1)
}

// Update mocks base method.
func (m *MockOpenStorageRoleServer) Update(arg0 context.Context, arg1 *api.SdkRoleUpdateRequest) (*api.SdkRoleUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOpenStorageRoleServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Update), arg0, arg1)
}

// MockOpenStorageNodeServer is a mock of OpenStorageNodeServer interface.
type MockOpenStorageNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageNodeServerMockRecorder
}

// MockOpenStorageNodeServerMockRecorder is the mock recorder for MockOpenStorageNodeServer.
type MockOpenStorageNodeServerMockRecorder struct {
	mock *MockOpenStorageNodeServer
}

// NewMockOpenStorageNodeServer creates a new mock instance.
func NewMockOpenStorageNodeServer(ctrl *gomock.Controller) *MockOpenStorageNodeServer {
	mock := &MockOpenStorageNodeServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageNodeServer) EXPECT() *MockOpenStorageNodeServerMockRecorder {
	return m.recorder
}

// Enumerate mocks base method.
func (m *MockOpenStorageNodeServer) Enumerate(arg0 context.Context, arg1 *api.SdkNodeEnumerateRequest) (*api.SdkNodeEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageNodeServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).Enumerate), arg0, arg1)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageNodeServer) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkNodeEnumerateWithFiltersRequest) (*api.SdkNodeEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnumerateWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageNodeServerMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).EnumerateWithFilters), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageNodeServer) Inspect(arg0 context.Context, arg1 *api.SdkNodeInspectRequest) (*api.SdkNodeInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageNodeServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).Inspect), arg0, arg1)
}

// InspectCurrent mocks base method.
func (m *MockOpenStorageNodeServer) InspectCurrent(arg0 context.Context, arg1 *api.SdkNodeInspectCurrentRequest) (*api.SdkNodeInspectCurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectCurrent", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeInspectCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectCurrent indicates an expected call of InspectCurrent.
func (mr *MockOpenStorageNodeServerMockRecorder) InspectCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectCurrent", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).InspectCurrent), arg0, arg1)
}

// MockOpenStorageClusterServer is a mock of OpenStorageClusterServer interface.
type MockOpenStorageClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageClusterServerMockRecorder
}

// MockOpenStorageClusterServerMockRecorder is the mock recorder for MockOpenStorageClusterServer.
type MockOpenStorageClusterServerMockRecorder struct {
	mock *MockOpenStorageClusterServer
}

// NewMockOpenStorageClusterServer creates a new mock instance.
func NewMockOpenStorageClusterServer(ctrl *gomock.Controller) *MockOpenStorageClusterServer {
	mock := &MockOpenStorageClusterServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageClusterServer) EXPECT() *MockOpenStorageClusterServerMockRecorder {
	return m.recorder
}

// InspectCurrent mocks base method.
func (m *MockOpenStorageClusterServer) InspectCurrent(arg0 context.Context, arg1 *api.SdkClusterInspectCurrentRequest) (*api.SdkClusterInspectCurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectCurrent", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterInspectCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectCurrent indicates an expected call of InspectCurrent.
func (mr *MockOpenStorageClusterServerMockRecorder) InspectCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectCurrent", reflect.TypeOf((*MockOpenStorageClusterServer)(nil).InspectCurrent), arg0, arg1)
}
