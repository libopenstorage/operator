/*
Copyright 2019 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/libopenstorage/operator/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageNodeLister helps list StorageNodes.
// All objects returned here must be treated as read-only.
type StorageNodeLister interface {
	// List lists all StorageNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StorageNode, err error)
	// StorageNodes returns an object that can list and get StorageNodes.
	StorageNodes(namespace string) StorageNodeNamespaceLister
	StorageNodeListerExpansion
}

// storageNodeLister implements the StorageNodeLister interface.
type storageNodeLister struct {
	indexer cache.Indexer
}

// NewStorageNodeLister returns a new StorageNodeLister.
func NewStorageNodeLister(indexer cache.Indexer) StorageNodeLister {
	return &storageNodeLister{indexer: indexer}
}

// List lists all StorageNodes in the indexer.
func (s *storageNodeLister) List(selector labels.Selector) (ret []*v1.StorageNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StorageNode))
	})
	return ret, err
}

// StorageNodes returns an object that can list and get StorageNodes.
func (s *storageNodeLister) StorageNodes(namespace string) StorageNodeNamespaceLister {
	return storageNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageNodeNamespaceLister helps list and get StorageNodes.
// All objects returned here must be treated as read-only.
type StorageNodeNamespaceLister interface {
	// List lists all StorageNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StorageNode, err error)
	// Get retrieves the StorageNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.StorageNode, error)
	StorageNodeNamespaceListerExpansion
}

// storageNodeNamespaceLister implements the StorageNodeNamespaceLister
// interface.
type storageNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageNodes in the indexer for a given namespace.
func (s storageNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.StorageNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StorageNode))
	})
	return ret, err
}

// Get retrieves the StorageNode from the indexer for a given namespace and name.
func (s storageNodeNamespaceLister) Get(name string) (*v1.StorageNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("storagenode"), name)
	}
	return obj.(*v1.StorageNode), nil
}
