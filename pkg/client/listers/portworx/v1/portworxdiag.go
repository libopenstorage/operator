/*
Copyright 2019 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/libopenstorage/operator/pkg/apis/portworx/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PortworxDiagLister helps list PortworxDiags.
// All objects returned here must be treated as read-only.
type PortworxDiagLister interface {
	// List lists all PortworxDiags in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PortworxDiag, err error)
	// PortworxDiags returns an object that can list and get PortworxDiags.
	PortworxDiags(namespace string) PortworxDiagNamespaceLister
	PortworxDiagListerExpansion
}

// portworxDiagLister implements the PortworxDiagLister interface.
type portworxDiagLister struct {
	indexer cache.Indexer
}

// NewPortworxDiagLister returns a new PortworxDiagLister.
func NewPortworxDiagLister(indexer cache.Indexer) PortworxDiagLister {
	return &portworxDiagLister{indexer: indexer}
}

// List lists all PortworxDiags in the indexer.
func (s *portworxDiagLister) List(selector labels.Selector) (ret []*v1.PortworxDiag, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PortworxDiag))
	})
	return ret, err
}

// PortworxDiags returns an object that can list and get PortworxDiags.
func (s *portworxDiagLister) PortworxDiags(namespace string) PortworxDiagNamespaceLister {
	return portworxDiagNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PortworxDiagNamespaceLister helps list and get PortworxDiags.
// All objects returned here must be treated as read-only.
type PortworxDiagNamespaceLister interface {
	// List lists all PortworxDiags in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PortworxDiag, err error)
	// Get retrieves the PortworxDiag from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PortworxDiag, error)
	PortworxDiagNamespaceListerExpansion
}

// portworxDiagNamespaceLister implements the PortworxDiagNamespaceLister
// interface.
type portworxDiagNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PortworxDiags in the indexer for a given namespace.
func (s portworxDiagNamespaceLister) List(selector labels.Selector) (ret []*v1.PortworxDiag, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PortworxDiag))
	})
	return ret, err
}

// Get retrieves the PortworxDiag from the indexer for a given namespace and name.
func (s portworxDiagNamespaceLister) Get(name string) (*v1.PortworxDiag, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("portworxdiag"), name)
	}
	return obj.(*v1.PortworxDiag), nil
}
