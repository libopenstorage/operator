// Code generated by MockGen. DO NOT EDIT.
// Source: ./drivers/storage/portworx/manifest/manifest.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	version "github.com/hashicorp/go-version"
	manifest "github.com/libopenstorage/operator/drivers/storage/portworx/manifest"
	v1 "github.com/libopenstorage/operator/pkg/apis/core/v1"
	record "k8s.io/client-go/tools/record"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockversionProvider is a mock of versionProvider interface.
type MockversionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockversionProviderMockRecorder
}

// MockversionProviderMockRecorder is the mock recorder for MockversionProvider.
type MockversionProviderMockRecorder struct {
	mock *MockversionProvider
}

// NewMockversionProvider creates a new mock instance.
func NewMockversionProvider(ctrl *gomock.Controller) *MockversionProvider {
	mock := &MockversionProvider{ctrl: ctrl}
	mock.recorder = &MockversionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockversionProvider) EXPECT() *MockversionProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockversionProvider) Get() (*manifest.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*manifest.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockversionProviderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockversionProvider)(nil).Get))
}

// MockManifest is a mock of Manifest interface.
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *MockManifestMockRecorder
}

// MockManifestMockRecorder is the mock recorder for MockManifest.
type MockManifestMockRecorder struct {
	mock *MockManifest
}

// NewMockManifest creates a new mock instance.
func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &MockManifestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifest) EXPECT() *MockManifestMockRecorder {
	return m.recorder
}

// CanAccessRemoteManifest mocks base method.
func (m *MockManifest) CanAccessRemoteManifest(cluster *v1.StorageCluster) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAccessRemoteManifest", cluster)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanAccessRemoteManifest indicates an expected call of CanAccessRemoteManifest.
func (mr *MockManifestMockRecorder) CanAccessRemoteManifest(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAccessRemoteManifest", reflect.TypeOf((*MockManifest)(nil).CanAccessRemoteManifest), cluster)
}

// GetVersions mocks base method.
func (m *MockManifest) GetVersions(arg0 *v1.StorageCluster, arg1 bool) (*manifest.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersions", arg0, arg1)
	ret0, _ := ret[0].(*manifest.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersions indicates an expected call of GetVersions.
func (mr *MockManifestMockRecorder) GetVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersions", reflect.TypeOf((*MockManifest)(nil).GetVersions), arg0, arg1)
}

// Init mocks base method.
func (m *MockManifest) Init(arg0 client.Client, arg1 record.EventRecorder, arg2 *version.Version) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1, arg2)
}

// Init indicates an expected call of Init.
func (mr *MockManifestMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockManifest)(nil).Init), arg0, arg1, arg2)
}
