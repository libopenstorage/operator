// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource_gateway.proto

package resourcegateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of priority
type AccessPriority_Type int32

const (
	// Unspecified, do NOT use
	AccessPriority_TYPE_UNSPECIFIED AccessPriority_Type = 0
	// Enqueued to low priority queue
	AccessPriority_LOW AccessPriority_Type = 1
	// Enqueued to medium priority queue
	AccessPriority_MEDIUM AccessPriority_Type = 2
	// Enqueued to high priority queue
	AccessPriority_HIGH AccessPriority_Type = 3
)

var AccessPriority_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "LOW",
	2: "MEDIUM",
	3: "HIGH",
}
var AccessPriority_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"LOW":              1,
	"MEDIUM":           2,
	"HIGH":             3,
}

func (x AccessPriority_Type) String() string {
	return proto.EnumName(AccessPriority_Type_name, int32(x))
}
func (AccessPriority_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{0, 0}
}

// Type of status
type AccessStatus_Type int32

const (
	// Unspecified, do NOT use
	AccessStatus_TYPE_UNSPECIFIED AccessStatus_Type = 0
	// Enqueued for access to the resource
	AccessStatus_QUEUED AccessStatus_Type = 1
	// Lease acquired for the resource
	AccessStatus_LEASED AccessStatus_Type = 2
)

var AccessStatus_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "QUEUED",
	2: "LEASED",
}
var AccessStatus_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"QUEUED":           1,
	"LEASED":           2,
}

func (x AccessStatus_Type) String() string {
	return proto.EnumName(AccessStatus_Type_name, int32(x))
}
func (AccessStatus_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{1, 0}
}

// AccessPriority specifies the priority of a client's access to a semaphore resource
type AccessPriority struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessPriority) Reset()         { *m = AccessPriority{} }
func (m *AccessPriority) String() string { return proto.CompactTextString(m) }
func (*AccessPriority) ProtoMessage()    {}
func (*AccessPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{0}
}
func (m *AccessPriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessPriority.Unmarshal(m, b)
}
func (m *AccessPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessPriority.Marshal(b, m, deterministic)
}
func (dst *AccessPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessPriority.Merge(dst, src)
}
func (m *AccessPriority) XXX_Size() int {
	return xxx_messageInfo_AccessPriority.Size(m)
}
func (m *AccessPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessPriority.DiscardUnknown(m)
}

var xxx_messageInfo_AccessPriority proto.InternalMessageInfo

// AccessStatus specifies the status of a client's access to a semaphore resource
type AccessStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessStatus) Reset()         { *m = AccessStatus{} }
func (m *AccessStatus) String() string { return proto.CompactTextString(m) }
func (*AccessStatus) ProtoMessage()    {}
func (*AccessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{1}
}
func (m *AccessStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessStatus.Unmarshal(m, b)
}
func (m *AccessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessStatus.Marshal(b, m, deterministic)
}
func (dst *AccessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessStatus.Merge(dst, src)
}
func (m *AccessStatus) XXX_Size() int {
	return xxx_messageInfo_AccessStatus.Size(m)
}
func (m *AccessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AccessStatus proto.InternalMessageInfo

// CreateRequest is the request to create a new semaphore resource
//
// resource_id and n_permits are required fields
// the other fields are optional and if skipped will be set to default values
type CreateRequest struct {
	// Resource Id of the new semaphore resource
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Number of permits that can be leased out for a resource
	NPermits uint32 `protobuf:"varint,2,opt,name=n_permits,json=nPermits" json:"n_permits,omitempty"`
	// Max duration for which a lease can be held
	LeaseTimeout uint64 `protobuf:"varint,3,opt,name=lease_timeout,json=leaseTimeout" json:"lease_timeout,omitempty"`
	// Max duration after which a client is considered dead if there is no heartbeat
	DeadNodeTimeout      uint64   `protobuf:"varint,4,opt,name=dead_node_timeout,json=deadNodeTimeout" json:"dead_node_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{2}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (dst *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(dst, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *CreateRequest) GetNPermits() uint32 {
	if m != nil {
		return m.NPermits
	}
	return 0
}

func (m *CreateRequest) GetLeaseTimeout() uint64 {
	if m != nil {
		return m.LeaseTimeout
	}
	return 0
}

func (m *CreateRequest) GetDeadNodeTimeout() uint64 {
	if m != nil {
		return m.DeadNodeTimeout
	}
	return 0
}

// CreateResponse is the response to create a new semaphore resource
type CreateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{3}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (dst *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(dst, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

// AcquireRequest is the request to acquire a lease for a semaphore resource
type AcquireRequest struct {
	// Resource Id to acquire the lease for
	// It should be the same as the resource_id in the CreateRequest
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client Id who is acquiring the lease
	// client_id can be any unique identifier for the client
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Priority of the client's access to the resource
	AccessPriority       AccessPriority_Type `protobuf:"varint,3,opt,name=access_priority,json=accessPriority,enum=operator.resourcegateway.AccessPriority_Type" json:"access_priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AcquireRequest) Reset()         { *m = AcquireRequest{} }
func (m *AcquireRequest) String() string { return proto.CompactTextString(m) }
func (*AcquireRequest) ProtoMessage()    {}
func (*AcquireRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{4}
}
func (m *AcquireRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquireRequest.Unmarshal(m, b)
}
func (m *AcquireRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquireRequest.Marshal(b, m, deterministic)
}
func (dst *AcquireRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireRequest.Merge(dst, src)
}
func (m *AcquireRequest) XXX_Size() int {
	return xxx_messageInfo_AcquireRequest.Size(m)
}
func (m *AcquireRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireRequest proto.InternalMessageInfo

func (m *AcquireRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *AcquireRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AcquireRequest) GetAccessPriority() AccessPriority_Type {
	if m != nil {
		return m.AccessPriority
	}
	return AccessPriority_TYPE_UNSPECIFIED
}

// AcquireResponse is the response to acquire a semaphore lock
type AcquireResponse struct {
	// Status of the client's access to the resource
	AccessStatus         AccessStatus_Type `protobuf:"varint,1,opt,name=access_status,json=accessStatus,enum=operator.resourcegateway.AccessStatus_Type" json:"access_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AcquireResponse) Reset()         { *m = AcquireResponse{} }
func (m *AcquireResponse) String() string { return proto.CompactTextString(m) }
func (*AcquireResponse) ProtoMessage()    {}
func (*AcquireResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{5}
}
func (m *AcquireResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquireResponse.Unmarshal(m, b)
}
func (m *AcquireResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquireResponse.Marshal(b, m, deterministic)
}
func (dst *AcquireResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireResponse.Merge(dst, src)
}
func (m *AcquireResponse) XXX_Size() int {
	return xxx_messageInfo_AcquireResponse.Size(m)
}
func (m *AcquireResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireResponse proto.InternalMessageInfo

func (m *AcquireResponse) GetAccessStatus() AccessStatus_Type {
	if m != nil {
		return m.AccessStatus
	}
	return AccessStatus_TYPE_UNSPECIFIED
}

// ReleaseRequest is the request to release a semaphore lock
type ReleaseRequest struct {
	// Resource Id to release the lease for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client Id who is releasing the lease
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseRequest) Reset()         { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()    {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{6}
}
func (m *ReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseRequest.Unmarshal(m, b)
}
func (m *ReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *ReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRequest.Merge(dst, src)
}
func (m *ReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseRequest.Size(m)
}
func (m *ReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRequest proto.InternalMessageInfo

func (m *ReleaseRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ReleaseRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// ReleaseResponse is the response to release a semaphore lock
type ReleaseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseResponse) Reset()         { *m = ReleaseResponse{} }
func (m *ReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseResponse) ProtoMessage()    {}
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{7}
}
func (m *ReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseResponse.Unmarshal(m, b)
}
func (m *ReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *ReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResponse.Merge(dst, src)
}
func (m *ReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseResponse.Size(m)
}
func (m *ReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResponse proto.InternalMessageInfo

// HeartbeatRequest is the request to send a heartbeat to the semaphore service
type HeartbeatRequest struct {
	// Resource ID to keep the lease alive for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client ID to keep the lease alive for
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{8}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (dst *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(dst, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *HeartbeatRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// HeartbeatLockResponse is the response to keep a semaphore lock alive
type HeartbeatResponse struct {
	// Status of the client's access to the resource
	AccessStatus         AccessStatus_Type `protobuf:"varint,1,opt,name=access_status,json=accessStatus,enum=operator.resourcegateway.AccessStatus_Type" json:"access_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_gateway_1e8a27e27414e1c7, []int{9}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatResponse.Unmarshal(m, b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
}
func (dst *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(dst, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatResponse.Size(m)
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func (m *HeartbeatResponse) GetAccessStatus() AccessStatus_Type {
	if m != nil {
		return m.AccessStatus
	}
	return AccessStatus_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*AccessPriority)(nil), "operator.resourcegateway.AccessPriority")
	proto.RegisterType((*AccessStatus)(nil), "operator.resourcegateway.AccessStatus")
	proto.RegisterType((*CreateRequest)(nil), "operator.resourcegateway.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "operator.resourcegateway.CreateResponse")
	proto.RegisterType((*AcquireRequest)(nil), "operator.resourcegateway.AcquireRequest")
	proto.RegisterType((*AcquireResponse)(nil), "operator.resourcegateway.AcquireResponse")
	proto.RegisterType((*ReleaseRequest)(nil), "operator.resourcegateway.ReleaseRequest")
	proto.RegisterType((*ReleaseResponse)(nil), "operator.resourcegateway.ReleaseResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "operator.resourcegateway.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "operator.resourcegateway.HeartbeatResponse")
	proto.RegisterEnum("operator.resourcegateway.AccessPriority_Type", AccessPriority_Type_name, AccessPriority_Type_value)
	proto.RegisterEnum("operator.resourcegateway.AccessStatus_Type", AccessStatus_Type_name, AccessStatus_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SemaphoreService service

type SemaphoreServiceClient interface {
	// Create creates a new semaphore resource
	// It initializes a semaphore for the resource in memory and persists it in the backend
	//
	// resource_id and n_permits are required fields
	// the other fields are optional and if skipped will be set to default values
	//
	// The first request every client makes to the semaphore service should be a create request
	//
	// Only the first request received by the semaphore service will create the resource
	// Any subsequent requests will be ignored
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Acquire acquires a lease for the resource or reserves a place in the queue
	//
	// Clients will poll this endpoint to acquire a lease for the resource
	// On the first poll, they will either be granted a lease or enqueued
	// If enqueued, the client should poll periodically to check if the lease is granted
	//
	// The client is enqueued in the priority queue corresponding to the access_priority
	// Leases are granted according to priority that is,
	// first all high priority clients are granted leases followed by the others in order
	//
	// A client can be starved by other clients with higher priority
	// Consider implementing a client-side timeout for how long to wait for the lease
	// before bypassing the semaphore access (if possible)
	// The priority can not be bumped up once the client is enqueued (Future work)
	//
	// No need to send a heartbeat while the client is enqueued
	// Heartbeats are updated implicitly on every Acquire request
	Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error)
	// Release releases the lease on the resource
	//
	// If the lease has expired, the release request will be a noop
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
	// Heartbeat keeps the lease alive for the resource
	//
	// Clients should periodically send heartbeats once they have acquired the lease
	// If no heartbeat is received within the dead_node_timeout, the lease will be revoked
	//
	// Client should monitor the access status returned to check if the lease is still valid
	// if the lease is lost the client should take the necessary action
	//
	//
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type semaphoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewSemaphoreServiceClient(cc *grpc.ClientConn) SemaphoreServiceClient {
	return &semaphoreServiceClient{cc}
}

func (c *semaphoreServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/operator.resourcegateway.SemaphoreService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error) {
	out := new(AcquireResponse)
	err := grpc.Invoke(ctx, "/operator.resourcegateway.SemaphoreService/Acquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := grpc.Invoke(ctx, "/operator.resourcegateway.SemaphoreService/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/operator.resourcegateway.SemaphoreService/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SemaphoreService service

type SemaphoreServiceServer interface {
	// Create creates a new semaphore resource
	// It initializes a semaphore for the resource in memory and persists it in the backend
	//
	// resource_id and n_permits are required fields
	// the other fields are optional and if skipped will be set to default values
	//
	// The first request every client makes to the semaphore service should be a create request
	//
	// Only the first request received by the semaphore service will create the resource
	// Any subsequent requests will be ignored
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Acquire acquires a lease for the resource or reserves a place in the queue
	//
	// Clients will poll this endpoint to acquire a lease for the resource
	// On the first poll, they will either be granted a lease or enqueued
	// If enqueued, the client should poll periodically to check if the lease is granted
	//
	// The client is enqueued in the priority queue corresponding to the access_priority
	// Leases are granted according to priority that is,
	// first all high priority clients are granted leases followed by the others in order
	//
	// A client can be starved by other clients with higher priority
	// Consider implementing a client-side timeout for how long to wait for the lease
	// before bypassing the semaphore access (if possible)
	// The priority can not be bumped up once the client is enqueued (Future work)
	//
	// No need to send a heartbeat while the client is enqueued
	// Heartbeats are updated implicitly on every Acquire request
	Acquire(context.Context, *AcquireRequest) (*AcquireResponse, error)
	// Release releases the lease on the resource
	//
	// If the lease has expired, the release request will be a noop
	Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
	// Heartbeat keeps the lease alive for the resource
	//
	// Clients should periodically send heartbeats once they have acquired the lease
	// If no heartbeat is received within the dead_node_timeout, the lease will be revoked
	//
	// Client should monitor the access status returned to check if the lease is still valid
	// if the lease is lost the client should take the necessary action
	//
	//
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterSemaphoreServiceServer(s *grpc.Server, srv SemaphoreServiceServer) {
	s.RegisterService(&_SemaphoreService_serviceDesc, srv)
}

func _SemaphoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.resourcegateway.SemaphoreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.resourcegateway.SemaphoreService/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).Acquire(ctx, req.(*AcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.resourcegateway.SemaphoreService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.resourcegateway.SemaphoreService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SemaphoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operator.resourcegateway.SemaphoreService",
	HandlerType: (*SemaphoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SemaphoreService_Create_Handler,
		},
		{
			MethodName: "Acquire",
			Handler:    _SemaphoreService_Acquire_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _SemaphoreService_Release_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _SemaphoreService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_gateway.proto",
}

func init() {
	proto.RegisterFile("resource_gateway.proto", fileDescriptor_resource_gateway_1e8a27e27414e1c7)
}

var fileDescriptor_resource_gateway_1e8a27e27414e1c7 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x51, 0x8f, 0xd2, 0x4c,
	0x14, 0xa5, 0x40, 0x58, 0xb8, 0x1f, 0x94, 0x32, 0xd9, 0x7c, 0x21, 0x68, 0x22, 0xa9, 0x0f, 0xe2,
	0x6e, 0xc4, 0x04, 0x7d, 0xdb, 0xa7, 0xdd, 0xa5, 0x2e, 0x4d, 0x16, 0xac, 0x05, 0x34, 0x9a, 0x98,
	0x3a, 0xdb, 0x5e, 0xb5, 0xc9, 0xc2, 0x74, 0x67, 0x06, 0x0d, 0x3f, 0x46, 0x1f, 0xfd, 0x9d, 0xa6,
	0x9d, 0x16, 0x81, 0x04, 0x76, 0x4d, 0xd6, 0xc7, 0xde, 0x7b, 0xe6, 0x9e, 0xd3, 0x73, 0xee, 0x0c,
	0xfc, 0xcf, 0x51, 0xb0, 0x05, 0xf7, 0xd1, 0xfb, 0x42, 0x25, 0x7e, 0xa7, 0xcb, 0x6e, 0xc4, 0x99,
	0x64, 0xa4, 0xc9, 0x22, 0xe4, 0x54, 0x32, 0xde, 0xcd, 0x00, 0x69, 0xdf, 0x1c, 0x82, 0x7e, 0xea,
	0xfb, 0x28, 0x84, 0xc3, 0x43, 0xc6, 0x43, 0xb9, 0x34, 0x4f, 0xa0, 0x38, 0x59, 0x46, 0x48, 0x0e,
	0xc1, 0x98, 0xbc, 0x77, 0x2c, 0x6f, 0x3a, 0x1a, 0x3b, 0xd6, 0xb9, 0xfd, 0xca, 0xb6, 0xfa, 0x46,
	0x8e, 0x1c, 0x40, 0xe1, 0xf2, 0xf5, 0x3b, 0x43, 0x23, 0x00, 0xa5, 0xa1, 0xd5, 0xb7, 0xa7, 0x43,
	0x23, 0x4f, 0xca, 0x50, 0x1c, 0xd8, 0x17, 0x03, 0xa3, 0x60, 0xf6, 0xa1, 0xaa, 0xc6, 0x8d, 0x25,
	0x95, 0x0b, 0x61, 0xbe, 0xdc, 0x3b, 0x0c, 0xa0, 0xf4, 0x66, 0x6a, 0x4d, 0xad, 0xbe, 0x9a, 0x77,
	0x69, 0x9d, 0x8e, 0xad, 0xbe, 0x91, 0x37, 0x7f, 0x6a, 0x50, 0x3b, 0xe7, 0x48, 0x25, 0xba, 0x78,
	0xb3, 0x40, 0x21, 0xc9, 0x23, 0xf8, 0x6f, 0xf5, 0x6b, 0x61, 0xd0, 0xd4, 0xda, 0x5a, 0xa7, 0xe2,
	0x42, 0x56, 0xb2, 0x03, 0xf2, 0x00, 0x2a, 0x73, 0x2f, 0x42, 0x3e, 0x0b, 0xa5, 0x68, 0xe6, 0xdb,
	0x5a, 0xa7, 0xe6, 0x96, 0xe7, 0x8e, 0xfa, 0x26, 0x8f, 0xa1, 0x76, 0x8d, 0x54, 0xa0, 0x27, 0xc3,
	0x19, 0xb2, 0x85, 0x6c, 0x16, 0xda, 0x5a, 0xa7, 0xe8, 0x56, 0x93, 0xe2, 0x44, 0xd5, 0xc8, 0x11,
	0x34, 0x02, 0xa4, 0x81, 0x37, 0x67, 0xc1, 0x1f, 0x60, 0x31, 0x01, 0xd6, 0xe3, 0xc6, 0x88, 0x05,
	0x19, 0xd6, 0x34, 0x40, 0xcf, 0xf4, 0x89, 0x88, 0xcd, 0x05, 0x9a, 0xbf, 0xb4, 0xd8, 0xc8, 0x9b,
	0x45, 0xc8, 0xff, 0x4a, 0xb3, 0x7f, 0x1d, 0xe2, 0x5c, 0xc6, 0xed, 0x7c, 0xd2, 0x2e, 0xab, 0x82,
	0x1d, 0x90, 0xb7, 0x50, 0xa7, 0x89, 0x93, 0x5e, 0x94, 0x26, 0x93, 0xa8, 0xd6, 0x7b, 0xcf, 0xba,
	0xbb, 0xc2, 0xec, 0x6e, 0x26, 0xd9, 0x8d, 0x9d, 0x77, 0x75, 0xba, 0x19, 0xaf, 0x0f, 0xf5, 0x95,
	0x4e, 0xa5, 0x9d, 0x38, 0x50, 0x4b, 0xa9, 0x44, 0x92, 0x5a, 0x22, 0x55, 0xef, 0x1d, 0xdf, 0x46,
	0xa4, 0x32, 0x56, 0x34, 0x55, 0xba, 0x1e, 0xfb, 0x08, 0x74, 0x17, 0x13, 0x77, 0xef, 0xc5, 0x0c,
	0xb3, 0x01, 0xf5, 0xd5, 0xbc, 0xd4, 0x70, 0x07, 0x8c, 0x01, 0x52, 0x2e, 0xaf, 0x90, 0xca, 0xfb,
	0x21, 0x41, 0x68, 0xac, 0x4d, 0xfc, 0x57, 0xde, 0xf4, 0x7e, 0x14, 0xc0, 0x18, 0xe3, 0x8c, 0x46,
	0x5f, 0x19, 0xc7, 0x31, 0xf2, 0x6f, 0xa1, 0x8f, 0xe4, 0x23, 0x94, 0xd4, 0x42, 0x91, 0x27, 0xbb,
	0x27, 0x6f, 0x5c, 0x89, 0x56, 0xe7, 0x76, 0x60, 0x6a, 0x55, 0x8e, 0x7c, 0x82, 0x83, 0x34, 0x74,
	0xd2, 0xd9, 0xa7, 0x7c, 0x7d, 0x7f, 0x5b, 0x4f, 0xef, 0x80, 0x5c, 0x67, 0x48, 0x13, 0xda, 0xc7,
	0xb0, 0xb9, 0x14, 0xfb, 0x18, 0xb6, 0xe3, 0xce, 0x91, 0xcf, 0x50, 0x59, 0xc5, 0x43, 0x8e, 0x76,
	0x9f, 0xdc, 0xde, 0x8a, 0xd6, 0xf1, 0x9d, 0xb0, 0x19, 0xcf, 0x99, 0x0d, 0x0f, 0x7d, 0x36, 0xdb,
	0x79, 0xe6, 0xec, 0xd0, 0x4d, 0x0b, 0x17, 0xaa, 0xe0, 0xc4, 0x2f, 0xac, 0xa3, 0x7d, 0x68, 0x3c,
	0x3f, 0xd9, 0x82, 0x5e, 0x95, 0x92, 0xd7, 0xf7, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30,
	0x19, 0x29, 0x38, 0x97, 0x05, 0x00, 0x00,
}
