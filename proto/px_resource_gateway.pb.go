// Code generated by protoc-gen-go. DO NOT EDIT.
// source: px_resource_gateway.proto

package pxresourcegateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of priority
type SemaphoreAccessPriority_Type int32

const (
	// Unspecified, do NOT use
	SemaphoreAccessPriority_TYPE_UNSPECIFIED SemaphoreAccessPriority_Type = 0
	// Enqueued to low priority queue
	SemaphoreAccessPriority_LOW SemaphoreAccessPriority_Type = 1
	// Enqueued to medium priority queue
	SemaphoreAccessPriority_MEDIUM SemaphoreAccessPriority_Type = 2
	// Enqueued to high priority queue
	SemaphoreAccessPriority_HIGH SemaphoreAccessPriority_Type = 3
)

var SemaphoreAccessPriority_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "LOW",
	2: "MEDIUM",
	3: "HIGH",
}
var SemaphoreAccessPriority_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"LOW":              1,
	"MEDIUM":           2,
	"HIGH":             3,
}

func (x SemaphoreAccessPriority_Type) String() string {
	return proto.EnumName(SemaphoreAccessPriority_Type_name, int32(x))
}
func (SemaphoreAccessPriority_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{0, 0}
}

// Type of status
type SemaphoreAccessStatus_Type int32

const (
	// Unspecified, do NOT use
	SemaphoreAccessStatus_TYPE_UNSPECIFIED SemaphoreAccessStatus_Type = 0
	// Resource is queued
	SemaphoreAccessStatus_QUEUED SemaphoreAccessStatus_Type = 1
	// Resource is locked
	SemaphoreAccessStatus_LOCKED SemaphoreAccessStatus_Type = 2
)

var SemaphoreAccessStatus_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "QUEUED",
	2: "LOCKED",
}
var SemaphoreAccessStatus_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"QUEUED":           1,
	"LOCKED":           2,
}

func (x SemaphoreAccessStatus_Type) String() string {
	return proto.EnumName(SemaphoreAccessStatus_Type_name, int32(x))
}
func (SemaphoreAccessStatus_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{1, 0}
}

// SemaphoreAccessPriority specifies the priority of the client's access to the resource
type SemaphoreAccessPriority struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SemaphoreAccessPriority) Reset()         { *m = SemaphoreAccessPriority{} }
func (m *SemaphoreAccessPriority) String() string { return proto.CompactTextString(m) }
func (*SemaphoreAccessPriority) ProtoMessage()    {}
func (*SemaphoreAccessPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{0}
}
func (m *SemaphoreAccessPriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SemaphoreAccessPriority.Unmarshal(m, b)
}
func (m *SemaphoreAccessPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SemaphoreAccessPriority.Marshal(b, m, deterministic)
}
func (dst *SemaphoreAccessPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemaphoreAccessPriority.Merge(dst, src)
}
func (m *SemaphoreAccessPriority) XXX_Size() int {
	return xxx_messageInfo_SemaphoreAccessPriority.Size(m)
}
func (m *SemaphoreAccessPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_SemaphoreAccessPriority.DiscardUnknown(m)
}

var xxx_messageInfo_SemaphoreAccessPriority proto.InternalMessageInfo

// SemaphoreAccessStatus specifies the status of the client's access to the resource
type SemaphoreAccessStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SemaphoreAccessStatus) Reset()         { *m = SemaphoreAccessStatus{} }
func (m *SemaphoreAccessStatus) String() string { return proto.CompactTextString(m) }
func (*SemaphoreAccessStatus) ProtoMessage()    {}
func (*SemaphoreAccessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{1}
}
func (m *SemaphoreAccessStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SemaphoreAccessStatus.Unmarshal(m, b)
}
func (m *SemaphoreAccessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SemaphoreAccessStatus.Marshal(b, m, deterministic)
}
func (dst *SemaphoreAccessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemaphoreAccessStatus.Merge(dst, src)
}
func (m *SemaphoreAccessStatus) XXX_Size() int {
	return xxx_messageInfo_SemaphoreAccessStatus.Size(m)
}
func (m *SemaphoreAccessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SemaphoreAccessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SemaphoreAccessStatus proto.InternalMessageInfo

// CreateResourceRequest is the request to create a new semaphore resource
type CreateResourceRequest struct {
	// Resource ID of the new semaphore resource
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Number of locks that can be acquired for the resource
	NLocks uint32 `protobuf:"varint,2,opt,name=n_locks,json=nLocks" json:"n_locks,omitempty"`
	// Max duration for which a lock can be held
	LockHoldTimeout      uint64   `protobuf:"varint,3,opt,name=lock_hold_timeout,json=lockHoldTimeout" json:"lock_hold_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResourceRequest) Reset()         { *m = CreateResourceRequest{} }
func (m *CreateResourceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateResourceRequest) ProtoMessage()    {}
func (*CreateResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{2}
}
func (m *CreateResourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResourceRequest.Unmarshal(m, b)
}
func (m *CreateResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResourceRequest.Marshal(b, m, deterministic)
}
func (dst *CreateResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResourceRequest.Merge(dst, src)
}
func (m *CreateResourceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateResourceRequest.Size(m)
}
func (m *CreateResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResourceRequest proto.InternalMessageInfo

func (m *CreateResourceRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *CreateResourceRequest) GetNLocks() uint32 {
	if m != nil {
		return m.NLocks
	}
	return 0
}

func (m *CreateResourceRequest) GetLockHoldTimeout() uint64 {
	if m != nil {
		return m.LockHoldTimeout
	}
	return 0
}

// CreateResourceResponse is the response to create a new semaphore resource
type CreateResourceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResourceResponse) Reset()         { *m = CreateResourceResponse{} }
func (m *CreateResourceResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResourceResponse) ProtoMessage()    {}
func (*CreateResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{3}
}
func (m *CreateResourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResourceResponse.Unmarshal(m, b)
}
func (m *CreateResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResourceResponse.Marshal(b, m, deterministic)
}
func (dst *CreateResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResourceResponse.Merge(dst, src)
}
func (m *CreateResourceResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResourceResponse.Size(m)
}
func (m *CreateResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResourceResponse proto.InternalMessageInfo

// AcquireLockRequest is the request to acquire a semaphore lock
type AcquireLockRequest struct {
	// Resource ID to acquire the lock for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client ID to acquire the resource for
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Priority of the client's access to the resource
	AccessPriority       SemaphoreAccessPriority_Type `protobuf:"varint,3,opt,name=access_priority,json=accessPriority,enum=operator.pxresourcegateway.SemaphoreAccessPriority_Type" json:"access_priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AcquireLockRequest) Reset()         { *m = AcquireLockRequest{} }
func (m *AcquireLockRequest) String() string { return proto.CompactTextString(m) }
func (*AcquireLockRequest) ProtoMessage()    {}
func (*AcquireLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{4}
}
func (m *AcquireLockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquireLockRequest.Unmarshal(m, b)
}
func (m *AcquireLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquireLockRequest.Marshal(b, m, deterministic)
}
func (dst *AcquireLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireLockRequest.Merge(dst, src)
}
func (m *AcquireLockRequest) XXX_Size() int {
	return xxx_messageInfo_AcquireLockRequest.Size(m)
}
func (m *AcquireLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireLockRequest proto.InternalMessageInfo

func (m *AcquireLockRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *AcquireLockRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AcquireLockRequest) GetAccessPriority() SemaphoreAccessPriority_Type {
	if m != nil {
		return m.AccessPriority
	}
	return SemaphoreAccessPriority_TYPE_UNSPECIFIED
}

// AcquireLockResponse is the response to acquire a semaphore lock
type AcquireLockResponse struct {
	// Status of the client's access to the resource
	AccessStatus         SemaphoreAccessStatus_Type `protobuf:"varint,1,opt,name=access_status,json=accessStatus,enum=operator.pxresourcegateway.SemaphoreAccessStatus_Type" json:"access_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AcquireLockResponse) Reset()         { *m = AcquireLockResponse{} }
func (m *AcquireLockResponse) String() string { return proto.CompactTextString(m) }
func (*AcquireLockResponse) ProtoMessage()    {}
func (*AcquireLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{5}
}
func (m *AcquireLockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcquireLockResponse.Unmarshal(m, b)
}
func (m *AcquireLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcquireLockResponse.Marshal(b, m, deterministic)
}
func (dst *AcquireLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireLockResponse.Merge(dst, src)
}
func (m *AcquireLockResponse) XXX_Size() int {
	return xxx_messageInfo_AcquireLockResponse.Size(m)
}
func (m *AcquireLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireLockResponse proto.InternalMessageInfo

func (m *AcquireLockResponse) GetAccessStatus() SemaphoreAccessStatus_Type {
	if m != nil {
		return m.AccessStatus
	}
	return SemaphoreAccessStatus_TYPE_UNSPECIFIED
}

// ReleaseLockRequest is the request to release a semaphore lock
type ReleaseLockRequest struct {
	// Resource ID to release the lock for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client ID to release the resource for
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseLockRequest) Reset()         { *m = ReleaseLockRequest{} }
func (m *ReleaseLockRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseLockRequest) ProtoMessage()    {}
func (*ReleaseLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{6}
}
func (m *ReleaseLockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseLockRequest.Unmarshal(m, b)
}
func (m *ReleaseLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseLockRequest.Marshal(b, m, deterministic)
}
func (dst *ReleaseLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseLockRequest.Merge(dst, src)
}
func (m *ReleaseLockRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseLockRequest.Size(m)
}
func (m *ReleaseLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseLockRequest proto.InternalMessageInfo

func (m *ReleaseLockRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ReleaseLockRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// ReleaseLockResponse is the response to release a semaphore lock
type ReleaseLockResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseLockResponse) Reset()         { *m = ReleaseLockResponse{} }
func (m *ReleaseLockResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseLockResponse) ProtoMessage()    {}
func (*ReleaseLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{7}
}
func (m *ReleaseLockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseLockResponse.Unmarshal(m, b)
}
func (m *ReleaseLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseLockResponse.Marshal(b, m, deterministic)
}
func (dst *ReleaseLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseLockResponse.Merge(dst, src)
}
func (m *ReleaseLockResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseLockResponse.Size(m)
}
func (m *ReleaseLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseLockResponse proto.InternalMessageInfo

// KeepAliveRequest is the request to send a heartbeat to the semaphore service
type KeepAliveRequest struct {
	// Resource ID to keep the lock alive for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Client ID to keep the lock alive for
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepAliveRequest) Reset()         { *m = KeepAliveRequest{} }
func (m *KeepAliveRequest) String() string { return proto.CompactTextString(m) }
func (*KeepAliveRequest) ProtoMessage()    {}
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{8}
}
func (m *KeepAliveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveRequest.Unmarshal(m, b)
}
func (m *KeepAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveRequest.Marshal(b, m, deterministic)
}
func (dst *KeepAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveRequest.Merge(dst, src)
}
func (m *KeepAliveRequest) XXX_Size() int {
	return xxx_messageInfo_KeepAliveRequest.Size(m)
}
func (m *KeepAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveRequest proto.InternalMessageInfo

func (m *KeepAliveRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *KeepAliveRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// KeepAliveLockResponse is the response to keep a semaphore lock alive
type KeepAliveResponse struct {
	// Status of the client's access to the resource
	AccessStatus         SemaphoreAccessStatus_Type `protobuf:"varint,1,opt,name=access_status,json=accessStatus,enum=operator.pxresourcegateway.SemaphoreAccessStatus_Type" json:"access_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *KeepAliveResponse) Reset()         { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()    {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_px_resource_gateway_629a048cec867dd1, []int{9}
}
func (m *KeepAliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveResponse.Unmarshal(m, b)
}
func (m *KeepAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveResponse.Marshal(b, m, deterministic)
}
func (dst *KeepAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveResponse.Merge(dst, src)
}
func (m *KeepAliveResponse) XXX_Size() int {
	return xxx_messageInfo_KeepAliveResponse.Size(m)
}
func (m *KeepAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveResponse proto.InternalMessageInfo

func (m *KeepAliveResponse) GetAccessStatus() SemaphoreAccessStatus_Type {
	if m != nil {
		return m.AccessStatus
	}
	return SemaphoreAccessStatus_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*SemaphoreAccessPriority)(nil), "operator.pxresourcegateway.SemaphoreAccessPriority")
	proto.RegisterType((*SemaphoreAccessStatus)(nil), "operator.pxresourcegateway.SemaphoreAccessStatus")
	proto.RegisterType((*CreateResourceRequest)(nil), "operator.pxresourcegateway.CreateResourceRequest")
	proto.RegisterType((*CreateResourceResponse)(nil), "operator.pxresourcegateway.CreateResourceResponse")
	proto.RegisterType((*AcquireLockRequest)(nil), "operator.pxresourcegateway.AcquireLockRequest")
	proto.RegisterType((*AcquireLockResponse)(nil), "operator.pxresourcegateway.AcquireLockResponse")
	proto.RegisterType((*ReleaseLockRequest)(nil), "operator.pxresourcegateway.ReleaseLockRequest")
	proto.RegisterType((*ReleaseLockResponse)(nil), "operator.pxresourcegateway.ReleaseLockResponse")
	proto.RegisterType((*KeepAliveRequest)(nil), "operator.pxresourcegateway.KeepAliveRequest")
	proto.RegisterType((*KeepAliveResponse)(nil), "operator.pxresourcegateway.KeepAliveResponse")
	proto.RegisterEnum("operator.pxresourcegateway.SemaphoreAccessPriority_Type", SemaphoreAccessPriority_Type_name, SemaphoreAccessPriority_Type_value)
	proto.RegisterEnum("operator.pxresourcegateway.SemaphoreAccessStatus_Type", SemaphoreAccessStatus_Type_name, SemaphoreAccessStatus_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SemaphoreService service

type SemaphoreServiceClient interface {
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error)
	// ReleaseLock releases the semaphore lock on the resource
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error)
	// KeepAlive sends a heartbeat to the semaphore service to keep the lock alive
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
}

type semaphoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewSemaphoreServiceClient(cc *grpc.ClientConn) SemaphoreServiceClient {
	return &semaphoreServiceClient{cc}
}

func (c *semaphoreServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := grpc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/CreateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error) {
	out := new(AcquireLockResponse)
	err := grpc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/AcquireLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error) {
	out := new(ReleaseLockResponse)
	err := grpc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/ReleaseLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := grpc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SemaphoreService service

type SemaphoreServiceServer interface {
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error)
	// ReleaseLock releases the semaphore lock on the resource
	ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error)
	// KeepAlive sends a heartbeat to the semaphore service to keep the lock alive
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
}

func RegisterSemaphoreServiceServer(s *grpc.Server, srv SemaphoreServiceServer) {
	s.RegisterService(&_SemaphoreService_serviceDesc, srv)
}

func _SemaphoreService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SemaphoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operator.pxresourcegateway.SemaphoreService",
	HandlerType: (*SemaphoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _SemaphoreService_CreateResource_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _SemaphoreService_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _SemaphoreService_ReleaseLock_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _SemaphoreService_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px_resource_gateway.proto",
}

func init() {
	proto.RegisterFile("px_resource_gateway.proto", fileDescriptor_px_resource_gateway_629a048cec867dd1)
}

var fileDescriptor_px_resource_gateway_629a048cec867dd1 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x5d, 0x6f, 0x12, 0x41,
	0x14, 0xed, 0x42, 0x43, 0xcb, 0xad, 0xa5, 0xdb, 0x41, 0x5a, 0xc4, 0x44, 0xc9, 0x3e, 0x11, 0xa3,
	0xdb, 0x88, 0xc6, 0x98, 0xf4, 0x89, 0xc2, 0x5a, 0x36, 0x05, 0x59, 0x17, 0xd0, 0xa8, 0x0f, 0x9b,
	0x75, 0xb9, 0xb1, 0xab, 0x0b, 0x33, 0x9d, 0x1d, 0x2a, 0x3c, 0xf8, 0xb3, 0xfc, 0x39, 0xfe, 0x17,
	0xb3, 0x1f, 0x10, 0x3e, 0xda, 0x0d, 0x4d, 0x1a, 0x1f, 0xe7, 0xde, 0x73, 0xcf, 0xb9, 0x73, 0xcf,
	0x9d, 0x81, 0x47, 0x6c, 0x62, 0x71, 0xf4, 0xe9, 0x98, 0x3b, 0x68, 0x7d, 0xb7, 0x05, 0xfe, 0xb2,
	0xa7, 0x2a, 0xe3, 0x54, 0x50, 0x52, 0xa2, 0x0c, 0xb9, 0x2d, 0x28, 0x57, 0xd9, 0x64, 0x06, 0x89,
	0x11, 0xca, 0x47, 0x38, 0xee, 0xe2, 0xd0, 0x66, 0x97, 0x94, 0x63, 0xcd, 0x71, 0xd0, 0xf7, 0x0d,
	0xee, 0x52, 0xee, 0x8a, 0xa9, 0x72, 0x0a, 0xdb, 0xbd, 0x29, 0x43, 0xf2, 0x10, 0xe4, 0xde, 0x67,
	0x43, 0xb3, 0xfa, 0xef, 0xbb, 0x86, 0x56, 0xd7, 0xdf, 0xe9, 0x5a, 0x43, 0xde, 0x22, 0x3b, 0x90,
	0x6e, 0x75, 0x3e, 0xc9, 0x12, 0x01, 0xc8, 0xb4, 0xb5, 0x86, 0xde, 0x6f, 0xcb, 0x29, 0xb2, 0x0b,
	0xdb, 0x4d, 0xfd, 0xbc, 0x29, 0xa7, 0x95, 0x36, 0x14, 0x56, 0x78, 0xbb, 0xc2, 0x16, 0x63, 0x5f,
	0x79, 0x9d, 0xc8, 0x0a, 0x90, 0xf9, 0xd0, 0xd7, 0xfa, 0x5a, 0x23, 0x22, 0x6e, 0x75, 0xea, 0x17,
	0x5a, 0x43, 0x4e, 0x29, 0xbf, 0xa1, 0x50, 0xe7, 0x68, 0x0b, 0x34, 0xe3, 0xfe, 0x4d, 0xbc, 0x1a,
	0xa3, 0x2f, 0xc8, 0x53, 0xd8, 0x9b, 0xdf, 0xda, 0x1d, 0x14, 0xa5, 0xb2, 0x54, 0xc9, 0x9a, 0x30,
	0x0b, 0xe9, 0x03, 0x72, 0x0c, 0x3b, 0x23, 0xcb, 0xa3, 0xce, 0x4f, 0xbf, 0x98, 0x2a, 0x4b, 0x95,
	0x7d, 0x33, 0x33, 0x6a, 0x05, 0x27, 0xf2, 0x0c, 0x0e, 0x83, 0xb0, 0x75, 0x49, 0xbd, 0x81, 0x25,
	0xdc, 0x21, 0xd2, 0xb1, 0x28, 0xa6, 0xcb, 0x52, 0x65, 0xdb, 0x3c, 0x08, 0x12, 0x4d, 0xea, 0x0d,
	0x7a, 0x51, 0x58, 0x29, 0xc2, 0xd1, 0xaa, 0xbc, 0xcf, 0xe8, 0xc8, 0x47, 0xe5, 0x8f, 0x04, 0xa4,
	0xe6, 0x5c, 0x8d, 0x5d, 0x8e, 0x01, 0xed, 0xc6, 0x6d, 0x3d, 0x86, 0xac, 0xe3, 0xb9, 0x38, 0x12,
	0x41, 0x3a, 0x15, 0xa6, 0x77, 0xa3, 0x80, 0x3e, 0x20, 0x36, 0x1c, 0xd8, 0xe1, 0xcc, 0x2c, 0x16,
	0x9b, 0x11, 0x36, 0x96, 0xab, 0xbe, 0x55, 0x6f, 0xb7, 0x52, 0xbd, 0xc5, 0x47, 0x35, 0x18, 0xb7,
	0x99, 0xb3, 0x97, 0xcd, 0xe5, 0x90, 0x5f, 0x6a, 0x3b, 0xba, 0x0e, 0xf9, 0x0a, 0xfb, 0xb1, 0xb2,
	0x1f, 0xda, 0x15, 0x76, 0x9e, 0xab, 0xbe, 0xb9, 0x83, 0x6e, 0xe4, 0x73, 0xa4, 0xfa, 0xc0, 0x5e,
	0xb4, 0xde, 0x04, 0x62, 0xa2, 0x87, 0xb6, 0x7f, 0x7f, 0xa3, 0x52, 0x0a, 0x90, 0x5f, 0xe2, 0x8c,
	0x6d, 0x31, 0x40, 0xbe, 0x40, 0x64, 0x35, 0xcf, 0xbd, 0xc6, 0xfb, 0x11, 0x62, 0x70, 0xb8, 0xc0,
	0xf8, 0x1f, 0xc6, 0x55, 0xfd, 0x9b, 0x06, 0x79, 0x0e, 0xee, 0x22, 0xbf, 0x76, 0x1d, 0x24, 0x53,
	0xc8, 0x2d, 0x6f, 0x22, 0x79, 0x99, 0x24, 0x76, 0xe3, 0xa3, 0x29, 0x55, 0xef, 0x52, 0x12, 0x4f,
	0x74, 0x8b, 0x30, 0xd8, 0x5b, 0x58, 0x19, 0xa2, 0x26, 0x91, 0xac, 0x3f, 0x89, 0xd2, 0xc9, 0xc6,
	0xf8, 0x45, 0xc5, 0x05, 0x73, 0x93, 0x15, 0xd7, 0x37, 0x2b, 0x59, 0xf1, 0xa6, 0xad, 0xd9, 0x22,
	0x3f, 0x20, 0x3b, 0x77, 0x99, 0x3c, 0x4f, 0xaa, 0x5f, 0x5d, 0xaf, 0xd2, 0x8b, 0x0d, 0xd1, 0x33,
	0xad, 0xb3, 0x0e, 0x3c, 0x71, 0xe8, 0x30, 0xa1, 0xea, 0xec, 0xc8, 0x98, 0xcc, 0x7c, 0x38, 0x8f,
	0x42, 0x46, 0xf0, 0xa1, 0x1b, 0xd2, 0x97, 0xfc, 0xc9, 0xe9, 0x1a, 0xfc, 0x5b, 0x26, 0xfc, 0xee,
	0x5f, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xba, 0x2a, 0xdb, 0xaa, 0x0b, 0x06, 0x00, 0x00,
}
