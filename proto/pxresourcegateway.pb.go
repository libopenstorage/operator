// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: proto/pxresourcegateway.proto

package pxresourcegateway

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of priority
type SemaphoreAccessPriority_Type int32

const (
	// Unspecified, do NOT use
	SemaphoreAccessPriority_TYPE_UNSPECIFIED SemaphoreAccessPriority_Type = 0
	// Enqueued to low priority queue
	SemaphoreAccessPriority_LOW SemaphoreAccessPriority_Type = 1
	// Enqueued to medium priority queue
	SemaphoreAccessPriority_MEDIUM SemaphoreAccessPriority_Type = 2
	// Enqueued to high priority queue
	SemaphoreAccessPriority_HIGH SemaphoreAccessPriority_Type = 3
)

// Enum value maps for SemaphoreAccessPriority_Type.
var (
	SemaphoreAccessPriority_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	SemaphoreAccessPriority_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"LOW":              1,
		"MEDIUM":           2,
		"HIGH":             3,
	}
)

func (x SemaphoreAccessPriority_Type) Enum() *SemaphoreAccessPriority_Type {
	p := new(SemaphoreAccessPriority_Type)
	*p = x
	return p
}

func (x SemaphoreAccessPriority_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SemaphoreAccessPriority_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pxresourcegateway_proto_enumTypes[0].Descriptor()
}

func (SemaphoreAccessPriority_Type) Type() protoreflect.EnumType {
	return &file_proto_pxresourcegateway_proto_enumTypes[0]
}

func (x SemaphoreAccessPriority_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SemaphoreAccessPriority_Type.Descriptor instead.
func (SemaphoreAccessPriority_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{0, 0}
}

// Type of status
type SemaphoreAccessStatus_Type int32

const (
	// Unspecified, do NOT use
	SemaphoreAccessStatus_TYPE_UNSPECIFIED SemaphoreAccessStatus_Type = 0
	// Resource is queued
	SemaphoreAccessStatus_QUEUED SemaphoreAccessStatus_Type = 1
	// Resource is locked
	SemaphoreAccessStatus_LOCKED SemaphoreAccessStatus_Type = 2
)

// Enum value maps for SemaphoreAccessStatus_Type.
var (
	SemaphoreAccessStatus_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "QUEUED",
		2: "LOCKED",
	}
	SemaphoreAccessStatus_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"QUEUED":           1,
		"LOCKED":           2,
	}
)

func (x SemaphoreAccessStatus_Type) Enum() *SemaphoreAccessStatus_Type {
	p := new(SemaphoreAccessStatus_Type)
	*p = x
	return p
}

func (x SemaphoreAccessStatus_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SemaphoreAccessStatus_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pxresourcegateway_proto_enumTypes[1].Descriptor()
}

func (SemaphoreAccessStatus_Type) Type() protoreflect.EnumType {
	return &file_proto_pxresourcegateway_proto_enumTypes[1]
}

func (x SemaphoreAccessStatus_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SemaphoreAccessStatus_Type.Descriptor instead.
func (SemaphoreAccessStatus_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{1, 0}
}

// SemaphoreAccessPriority specifies the priority of the client's access to the resource
type SemaphoreAccessPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SemaphoreAccessPriority) Reset() {
	*x = SemaphoreAccessPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreAccessPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreAccessPriority) ProtoMessage() {}

func (x *SemaphoreAccessPriority) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreAccessPriority.ProtoReflect.Descriptor instead.
func (*SemaphoreAccessPriority) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{0}
}

// SemaphoreAccessStatus specifies the status of the client's access to the resource
type SemaphoreAccessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SemaphoreAccessStatus) Reset() {
	*x = SemaphoreAccessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreAccessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreAccessStatus) ProtoMessage() {}

func (x *SemaphoreAccessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreAccessStatus.ProtoReflect.Descriptor instead.
func (*SemaphoreAccessStatus) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{1}
}

// AcquireLockRequest is the request to acquire a semaphore lock
type AcquireLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID to acquire the lock for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Client ID to acquire the resource for
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Priority of the client's access to the resource
	AccessPriority SemaphoreAccessPriority_Type `protobuf:"varint,3,opt,name=access_priority,json=accessPriority,proto3,enum=operator.pxresourcegateway.SemaphoreAccessPriority_Type" json:"access_priority,omitempty"`
}

func (x *AcquireLockRequest) Reset() {
	*x = AcquireLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLockRequest) ProtoMessage() {}

func (x *AcquireLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLockRequest.ProtoReflect.Descriptor instead.
func (*AcquireLockRequest) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{2}
}

func (x *AcquireLockRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *AcquireLockRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AcquireLockRequest) GetAccessPriority() SemaphoreAccessPriority_Type {
	if x != nil {
		return x.AccessPriority
	}
	return SemaphoreAccessPriority_TYPE_UNSPECIFIED
}

// AcquireLockResponse is the response to acquire a semaphore lock
type AcquireLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the client's access to the resource
	AccessStatus SemaphoreAccessStatus_Type `protobuf:"varint,1,opt,name=access_status,json=accessStatus,proto3,enum=operator.pxresourcegateway.SemaphoreAccessStatus_Type" json:"access_status,omitempty"`
}

func (x *AcquireLockResponse) Reset() {
	*x = AcquireLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLockResponse) ProtoMessage() {}

func (x *AcquireLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLockResponse.ProtoReflect.Descriptor instead.
func (*AcquireLockResponse) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{3}
}

func (x *AcquireLockResponse) GetAccessStatus() SemaphoreAccessStatus_Type {
	if x != nil {
		return x.AccessStatus
	}
	return SemaphoreAccessStatus_TYPE_UNSPECIFIED
}

// ReleaseLockRequest is the request to release a semaphore lock
type ReleaseLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID to release the lock for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Client ID to release the resource for
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ReleaseLockRequest) Reset() {
	*x = ReleaseLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockRequest) ProtoMessage() {}

func (x *ReleaseLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockRequest.ProtoReflect.Descriptor instead.
func (*ReleaseLockRequest) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseLockRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ReleaseLockRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// KeepAliveRequest is the request to send a heartbeat to the semaphore service
type KeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID to keep the lock alive for
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Client ID to keep the lock alive for
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pxresourcegateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pxresourcegateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_proto_pxresourcegateway_proto_rawDescGZIP(), []int{5}
}

func (x *KeepAliveRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *KeepAliveRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

var File_proto_pxresourcegateway_proto protoreflect.FileDescriptor

var file_proto_pxresourcegateway_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x17, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0x4d,
	0x0a, 0x15, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb5, 0x01,
	0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x61, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x72, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32,
	0xc3, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x78, 0x65, 0x2f, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x3a, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x78, 0x65,
	0x2f, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x3a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x3a, 0x01,
	0x2a, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x78, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x78, 0x65, 0x2f, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x3a, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x54, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x16, 0x50, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x3b, 0x70, 0x78, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_pxresourcegateway_proto_rawDescOnce sync.Once
	file_proto_pxresourcegateway_proto_rawDescData = file_proto_pxresourcegateway_proto_rawDesc
)

func file_proto_pxresourcegateway_proto_rawDescGZIP() []byte {
	file_proto_pxresourcegateway_proto_rawDescOnce.Do(func() {
		file_proto_pxresourcegateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_pxresourcegateway_proto_rawDescData)
	})
	return file_proto_pxresourcegateway_proto_rawDescData
}

var file_proto_pxresourcegateway_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_pxresourcegateway_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_pxresourcegateway_proto_goTypes = []interface{}{
	(SemaphoreAccessPriority_Type)(0), // 0: operator.pxresourcegateway.SemaphoreAccessPriority.Type
	(SemaphoreAccessStatus_Type)(0),   // 1: operator.pxresourcegateway.SemaphoreAccessStatus.Type
	(*SemaphoreAccessPriority)(nil),   // 2: operator.pxresourcegateway.SemaphoreAccessPriority
	(*SemaphoreAccessStatus)(nil),     // 3: operator.pxresourcegateway.SemaphoreAccessStatus
	(*AcquireLockRequest)(nil),        // 4: operator.pxresourcegateway.AcquireLockRequest
	(*AcquireLockResponse)(nil),       // 5: operator.pxresourcegateway.AcquireLockResponse
	(*ReleaseLockRequest)(nil),        // 6: operator.pxresourcegateway.ReleaseLockRequest
	(*KeepAliveRequest)(nil),          // 7: operator.pxresourcegateway.KeepAliveRequest
	(*emptypb.Empty)(nil),             // 8: google.protobuf.Empty
}
var file_proto_pxresourcegateway_proto_depIdxs = []int32{
	0, // 0: operator.pxresourcegateway.AcquireLockRequest.access_priority:type_name -> operator.pxresourcegateway.SemaphoreAccessPriority.Type
	1, // 1: operator.pxresourcegateway.AcquireLockResponse.access_status:type_name -> operator.pxresourcegateway.SemaphoreAccessStatus.Type
	4, // 2: operator.pxresourcegateway.SemaphoreService.AcquireLock:input_type -> operator.pxresourcegateway.AcquireLockRequest
	6, // 3: operator.pxresourcegateway.SemaphoreService.ReleaseLock:input_type -> operator.pxresourcegateway.ReleaseLockRequest
	7, // 4: operator.pxresourcegateway.SemaphoreService.KeepAlive:input_type -> operator.pxresourcegateway.KeepAliveRequest
	5, // 5: operator.pxresourcegateway.SemaphoreService.AcquireLock:output_type -> operator.pxresourcegateway.AcquireLockResponse
	8, // 6: operator.pxresourcegateway.SemaphoreService.ReleaseLock:output_type -> google.protobuf.Empty
	8, // 7: operator.pxresourcegateway.SemaphoreService.KeepAlive:output_type -> google.protobuf.Empty
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_pxresourcegateway_proto_init() }
func file_proto_pxresourcegateway_proto_init() {
	if File_proto_pxresourcegateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_pxresourcegateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreAccessPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pxresourcegateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreAccessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pxresourcegateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pxresourcegateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pxresourcegateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pxresourcegateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_pxresourcegateway_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_pxresourcegateway_proto_goTypes,
		DependencyIndexes: file_proto_pxresourcegateway_proto_depIdxs,
		EnumInfos:         file_proto_pxresourcegateway_proto_enumTypes,
		MessageInfos:      file_proto_pxresourcegateway_proto_msgTypes,
	}.Build()
	File_proto_pxresourcegateway_proto = out.File
	file_proto_pxresourcegateway_proto_rawDesc = nil
	file_proto_pxresourcegateway_proto_goTypes = nil
	file_proto_pxresourcegateway_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SemaphoreServiceClient is the client API for SemaphoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SemaphoreServiceClient interface {
	// (-- api-linter: core::0131::synonyms=disabled
	//     aip.dev/not-precedent: We need to do this because this service
	//     has a semaphore implementation which needs to define AcquireLock interface. --)
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error)
	// ReleaseLock releases the semaphore lock on the resource
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// KeepAlive sends a heartbeat to the semaphore service to keep the lock alive
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type semaphoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemaphoreServiceClient(cc grpc.ClientConnInterface) SemaphoreServiceClient {
	return &semaphoreServiceClient{cc}
}

func (c *semaphoreServiceClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error) {
	out := new(AcquireLockResponse)
	err := c.cc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/AcquireLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/ReleaseLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/operator.pxresourcegateway.SemaphoreService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemaphoreServiceServer is the server API for SemaphoreService service.
type SemaphoreServiceServer interface {
	// (-- api-linter: core::0131::synonyms=disabled
	//     aip.dev/not-precedent: We need to do this because this service
	//     has a semaphore implementation which needs to define AcquireLock interface. --)
	// AcquireLock acquires a semaphore lock or reserves a place in the queue for the resource
	AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error)
	// ReleaseLock releases the semaphore lock on the resource
	ReleaseLock(context.Context, *ReleaseLockRequest) (*emptypb.Empty, error)
	// KeepAlive sends a heartbeat to the semaphore service to keep the lock alive
	KeepAlive(context.Context, *KeepAliveRequest) (*emptypb.Empty, error)
}

// UnimplementedSemaphoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSemaphoreServiceServer struct {
}

func (*UnimplementedSemaphoreServiceServer) AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (*UnimplementedSemaphoreServiceServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (*UnimplementedSemaphoreServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}

func RegisterSemaphoreServiceServer(s *grpc.Server, srv SemaphoreServiceServer) {
	s.RegisterService(&_SemaphoreService_serviceDesc, srv)
}

func _SemaphoreService_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemaphoreService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operator.pxresourcegateway.SemaphoreService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SemaphoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operator.pxresourcegateway.SemaphoreService",
	HandlerType: (*SemaphoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLock",
			Handler:    _SemaphoreService_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _SemaphoreService_ReleaseLock_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _SemaphoreService_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pxresourcegateway.proto",
}
